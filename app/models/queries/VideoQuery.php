<?php

namespace app\models\queries;

use app\models\views\VideoView;
use yii\db\ActiveQuery;
use yii\db\Expression;
use yii\db\Query;

class VideoQuery extends ActiveQuery
{
    /**
     * @inheritDoc
     */
    public function __construct()
    {
        parent::__construct(VideoView::class);
    }

    /**
     * @inheritDoc
     */
    public function prepare($builder)
    {
        $simple_mode_field = $this->checkAndRewrieOrder();
        
        if ($simple_mode_field) {
            $this->checkAndRewrieOffset($simple_mode_field);
        }

        return parent::prepare($builder);
    }

    private function checkAndRewrieOrder()
    {
        $simple_mode = false;
        if (count($this->orderBy) == 1) {
            if (isset($this->orderBy['views'])) {
                $this->orderBy['rows_views'] = $this->orderBy['views'];
                unset($this->orderBy['views']);
                $simple_mode = 'rows_views';
            }

            if (isset($this->orderBy['time_add'])) {
                $this->orderBy['rows_time_add'] = $this->orderBy['time_add'];
                unset($this->orderBy['time_add']);
                $simple_mode = 'rows_time_add';
            }
        }
        return $simple_mode;
    }
    
    private function checkAndRewrieOffset($field_name)
    {
        if ($this->offset > 0) {
            $this->andWhere(['>=', $field_name, $this->offset]);
            $this->offset = null;
        }
    }

    /**
     * @inheritDoc
     */
    public function count($q = '*', $db = null)
    {
        if ($q == '*') {
            $modelClass = $this->modelClass;
            $tableName = $modelClass::tableName();
            return (new Query())->select(new Expression('reltuples::bigint'))
                ->from('pg_class')
                ->where(['relname' => $tableName])
                ->createCommand($db)
                ->queryScalar();
        }
        
        return parent::count($q, $db);
    }


    /**
     * @inheritDoc
     */
    public function populate($rows)
    {
        return parent::populate($rows); // TODO: Change the autogenerated stub
    }



    /** Just for autocomplete */
    
    /**
     * @inheritDoc
     * @return VideoView|array|null
     */
    public function one($db = null)
    {
        return parent::one($db);
    }

    /**
     * @inheritDoc
     * @return VideoView[]|array
     */
    public function all($db = null)
    {
        return parent::all($db);
    }


}